# CHECK IF INSTANCE IS RUNNING
$[ $LF_LEVEL -eq 1 ] || read -p "Warning: You're in a nested lf instance!" foo

# BASIC VARS
set drawbox
set previewer ~/.config/lf/pv
set cleaner ~/.config/lf/clear_img.sh
set scrolloff 10
set icons

# needed for the most scripts
set shell zsh
set shellopts '-e:--shwordsplit'
set ifs "\n"

# CMDS/FUNCTIONS
cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -x
	clear; echo "Copy to where?"
	dest="$(awk '{print $2}' $HOME/.config/shell/bm-dirs | fzf | sed 's|~|$HOME|' )" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}


cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(awk '{print $2}' $HOME/.config/shell/bm-dirs | fzf | sed 's|~|$HOME|' )" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd select-files ${{
    { echo "$fs"; find -L "$(pwd)" -mindepth 1 -maxdepth 1 -type f; } |
        if [ "$lf_hidden" = "false" ]; then
          # remove any hidden files so you only select files you can see.
          grep -v '/\.[^/]\+$'
        else
          cat
        fi |
        sed '/^$/d' | sort | uniq -u |
        xargs -d '\n' -r -I{} lf -remote "send $id toggle {}"
}}

cmd select-dirs ${{
    { echo "$fs"; find -L "$(pwd)" -mindepth 1 -maxdepth 1 -type d; } |
        if [ "$lf_hidden" = "false" ]; then
          grep -v '/\.[^/]\+$'
        else
          cat
        fi |
        sed '/^$/d' | sort | uniq -u |
        xargs -d '\n' -r -I{} lf -remote "send $id toggle {}"
}}

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(lf -remote load)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        copy) ln -sr -t . -- "$@";;
        move) ln -t . -- "$@";;
    esac
}}

# set wintitle on cd
cmd on-cd &{{ printf "\033]0; (lf) - $PWD\007" > /dev/tty }}
on-cd

cmd yank-dirname ${{ dirname -- "$f" | tr -d '\n' | xclip -i -selection clipboard }}
cmd yank-path ${{ echo "$fx" | xclip -i -selection clipboard }}
cmd yank-basename ${{ echo "$fx" | xargs -r -d '\n' basename -a -- | xclip -i -selection clipboard }}

cmd yank-basename-without-extension ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a -- |
      awk -e '{
        for (i=length($0); i > 0; i--) {
          if (substr($0, i, 1) == ".") {
            if (i == 1) print $0
            else print substr($0, 0, i-1)

            break
          }
        }

        if (i == 0)
          print $0
      }' | xclip -i -selection clipboard
}}

# fuzzy finds
cmd cd-fuzzy ${{ lf -remote "send $id cd $(ls -d1 */ |fzf | sed 's/\ /\\ /g')" }}
cmd sel-fuzzy ${{ lf -remote "send $id select $(find -maxdepth 1 -type f | fzf | sed 's/\ /\\ /g')" }}
# cmd cd-fuzzy ${{ lf -remote "send $id select $(ls -d1 */ | fzf | sed 's/\ /\\ /g')" }}

# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
cmd editExt ${{ setsid st -e $EDITOR $f & }}
cmd diskUsage ${{ du --max-depth=1 -h --apparent-size | less }}

cmd tofold ${{
	set -f
	clear; echo
	# printf "move files to folder: "
	newd=$(ls -d1 */ | fzf --print-query | tail -1)
	# read newd

	if [ -d $newd ]
	then 	printf "folder \"$newd\" exists, merge? [y/N]"
		read choice
		[ "$choice" = "y" ] && mv $fx $newd

	else 	mkdir $newd && mv $fx $newd; fi
}}

# bulk-rename
cmd bulk-rename ${{
    old=$(mktemp)
    new=$(mktemp)
    [ -n $fs ] && fs=$(ls)
    printf "$fs\n" > $old
    printf "$fs\n" > $new
    $EDITOR $new
    [ $(cat $new | wc -l) -ne $(cat $old | wc -l) ] && exit
    paste $old $new | while read names; do
        src=$(printf $names | cut -f1)
        dst=$(printf $names | cut -f2)
        [ $src = $dst ] && continue
        [ -e $dst ] && continue
        mv $src $dst
    done
    rm $old $new
    lf -remote "send $id unselect"
}}

cmd delete ${{
	set -f
	clear; echo
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf $fx
}}

cmd paste ${{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -nv -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send load"
    lf -remote "send clear"
}}


cmd dragon %dragon-drag-and-drop -a -x $fx
cmd cpdragon %cpdragon
cmd mvdragon %mvdragon


cmd info ${{ $HOME/.config/lf/pv $fx | less }}

# UNBIND KEYS
map y; map d; map p; map d; map c; map g; map q; map r; map w


map i info
map gg top

# CHANGE DIR
map <c-f> $lf -remote "send $id select '$(fzf)'"
map <c-g> $lf -remote "send $id cd '$(find -type d | fzf)'"
map J $lf -remote "send $id cd $(awk '{print $2}' $HOME/.config/shell/bm-dirs | fzf | sed 's|$HOME|~|')"
map cd push :cd<space>
map gc cd ~/.config
map gd cd ~/dl
map gD cd ~/dox
map gm cd /mnt
map gM cd ~/mm
map gt cd ~/temp
map gw cd ~/work
map gr cd ~/.local/repos
map gb cd ~/.local/bin
map gs cd ~/.local/share
map go cd ~/.local/opt
map gO cd ~/drive
map gn cd ~/.local/share/notes
map gh cd ~

# COPY/CUT/PASE
map yy copy
map dd cut
map pp paste
map Y copyto
map M moveto

# GUI COPY/MOVE
map dr dragon
map dc cpdragon
map dm mvdragon

# DATA MANIPULATING
map ad push %mkdir<space>''<left>
map af push %touch<space>''<left>
map tf tofold
map D delete

# RENAME
map C push A<c-u>			# new rename
map I push A<c-a>			# at the very beginning
map A rename				# at the very end
map i push A<a-b><c-b>		# before extention
# map a push A<a-b>			# after extention
map br bulk-rename			# more files

# ARCHIVES
map x $extract -x $f
map X $extract -c $f
map ct $lf_packer $fx
map cz $gzip $f
map cx $xz $f
map c2 $bzip2 $f

# OPENING FILES
map o $lf_opener -s $f
map O &lf_opener -c $f
map e $$EDITOR $f
map E editExt

# SYSTEM
map ZZ quit
map ZQ quit
map <c-z> $ kill -STOP $PPID
map <c-r> reload
map R redraw
# map W $setwal $f
map W $setbg $f
map . set hidden!
# map du diskUsage
map du $ncdu

# MOUSE
map <m-down> down
map <c-e> down
map <m-up> up
map <c-y> up
map <m-1> toggle
map <m-2> dragon
map <m-3> open
# map <c-m-3> updir

# SHELL
# map s shell
# map <enter> shell
map S $$SHELL
map <enter> cd-fuzzy
map <backspace2> sel-fuzzy

map yd yank-dirname
map yp yank-path
map yb yank-basename
map ye yank-basename-without-extension

map yi select-files
map yo select-dirs

map U clear

# cmd open-with %"$@" $fx
# map O push :open-with<space>

map pP :link

# FILEPICKER TMUX
cmd zle-cd %printf 'cd %q && zle reset-prompt\n' "$PWD" >&$ZLE_FIFO

cmd zle-insert-relative %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }${(q)$(realpath %q --relative-to=$PWD)}"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-insert-absolute %{{
    for f in $fx; do
        printf 'LBUFFER+="${LBUFFER:+ }%q"\n' "$f" >&$ZLE_FIFO
    done
}}

cmd zle-init :{{
    map . zle-cd
    map a zle-insert-relative
    map A zle-insert-absolute
}}
&[[ -n "$ZLE_FIFO" ]] && lf -remote "send $id zle-init"
